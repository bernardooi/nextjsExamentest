// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    SUPER_ADMIN
    ADMIN
    GUEST
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    role Role @default(GUEST)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
model Student {
    id        Int       @id @default(autoincrement())
    firstName String    @db.VarChar(255)
    lastname  String    @db.VarChar(255)
    subjects  Subject[]
}

model Subject {
    id       Int       @id @default(autoincrement())
    subject  String    @db.VarChar(255)
    points   Int
    students Student[]
    grade    Grade?
}

enum Grade {
    A
    B
    C
    D
    E
    F
}
